generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  firstName    String
  lastName     String
  phoneNumber  String        @unique
  role         Role          @default(CLIENT)
  createdAt    DateTime      @default(now())
  appointments Appointment[]
}

enum Role {
  CLIENT
  BARBER
  MANAGER
  SUPER_ADMIN
}

model Barbershop {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  phoneNumber String   @unique
  barbers     Barber[]
}

model Barber {
  id           Int             @id @default(autoincrement())
  email        String          @unique
  password     String
  firstName    String
  lastName     String
  phoneNumber  String          @unique
  role         Role            @default(BARBER)
  createdAt    DateTime        @default(now())
  barbershop   Barbershop      @relation(fields: [barbershopId], references: [id])
  barbershopId Int
  services     BarberService[]
  status       BarberStatus    @relation(fields: [statusId], references: [id])
  statusId     Int
  appointments Appointment[]
  TimeSlot     TimeSlot[]
}

model BarberStatus {
  id           Int            @id @default(autoincrement())
  description  String
  barbers      Barber[]
  ServicePrice ServicePrice[]
}

model BarberService {
  barber    Barber  @relation(fields: [barberId], references: [id])
  barberId  Int
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int

  @@id([barberId, serviceId])
}

model Service {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  duration     Int
  appointments Appointment[]
  servicePrice ServicePrice[]
  barbers      BarberService[]
}

model ServicePrice {
  service        Service      @relation(fields: [serviceId], references: [id])
  serviceId      Int
  barberStatus   BarberStatus @relation(fields: [barberStatusId], references: [id])
  barberStatusId Int
  price          Int

  @@id([serviceId, barberStatusId])
}

model TimeSlot {
  id            Int          @id @default(autoincrement())
  startTime     DateTime
  barber        Barber       @relation(fields: [barberId], references: [id])
  barberId      Int
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  status        SlotStatus   @default(AVAILABLE)
  appointmentId Int?
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

model Appointment {
  id        Int               @id @default(autoincrement())
  status    AppointmentStatus @default(CONFIRMED)
  User      User              @relation(fields: [userEmail], references: [email])
  userEmail String
  Barber    Barber            @relation(fields: [barberId], references: [id])
  barberId  Int
  service   Service           @relation(fields: [serviceId], references: [id])
  serviceId Int
  TimeSlot  TimeSlot[]
}

enum AppointmentStatus {
  CONFIRMED
  CANCELED
}
